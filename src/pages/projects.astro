---
import Card from "@components/Card.astro";
import ProjectImage from "@components/ProjectImage.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { projects, ProjectType } from "../data/projects";

const sortedProjects = projects.sort((a, b) => Number(a.date) - Number(b.date));
---

<BaseLayout title="Nimo's Projects">
  <main class="mx-auto max-w-[1424px] font-medium text-neutral-700">
    <h1
      class="mx-auto text-center font-serif text-6xl text-neutral-800 drop-shadow sm:text-7xl md:text-left"
    >
      Projects
    </h1>
    <fieldset class="mt-8">
      <legend>Filter</legend>
      {
        Object.values(ProjectType)
          .sort()
          .map((projectType) => (
            <label>
              <input
                type="checkbox"
                name={projectType}
                class="project-type-option"
              />
              {projectType}
            </label>
          ))
      }
    </fieldset>
    <ul
      class="mt-12 flex flex-col items-center gap-12 sm:mt-16 md:mt-20 md:flex-row md:flex-wrap md:items-stretch"
    >
      {
        sortedProjects.map((project) => (
          <Card
            type={ProjectType[project.type]}
            title={project.title}
            body={project.body}
            date={project.date}
            url={project.url}
          >
            <ProjectImage
              image={project.image}
              emoji={project.emoji}
              alt={project.alt}
            />
          </Card>
        ))
      }
    </ul>
  </main>
</BaseLayout>

<script>
  const projectTypeOptions = document.querySelectorAll<HTMLInputElement>(
    "input.project-type-option"
  );
  for (let option of projectTypeOptions) {
    option.setAttribute("aria-checked", String(option.checked));

    option.addEventListener("change", () => {
      option.setAttribute("aria-checked", String(option.checked));

      // Get the list of project types to be shown
      let selectedProjectTypes = [];
      for (let option of projectTypeOptions) {
        if (option.checked) {
          selectedProjectTypes.push(option.name);
        }
      }

      // Hide or show projects depending on their type
      const projectCards = document.querySelectorAll<HTMLElement>(".card");
      for (let projectCard of projectCards) {
        const projectType = projectCard.querySelector(".card-type")?.innerHTML;
        if (
          selectedProjectTypes.length === 0 ||
          (projectType && selectedProjectTypes.includes(projectType))
        ) {
          projectCard.style.display = "block";
        } else {
          projectCard.style.display = "none";
        }
      }
    });
  }
</script>
