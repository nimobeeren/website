---
import Card from "@components/Card.astro";
import ProjectImage from "@components/ProjectImage.astro";
import FilterIcon from "@icons/Filter.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { projects, ProjectType } from "../data/projects";

const sortedProjects = projects.sort((a, b) => Number(a.date) - Number(b.date));
---

<BaseLayout title="Nimo's Projects">
  <main class="mx-auto max-w-[1424px] font-medium text-neutral-700">
    <h1
      class="mx-auto text-center font-serif text-5xl text-neutral-800 drop-shadow md:text-left"
    >
      Projects
    </h1>
    <fieldset
      class="mt-8 flex items-center gap-4 border-b-2 border-neutral-200 px-2 pb-8"
      aria-labelledby="filters-label"
    >
      <FilterIcon alt="Filter" class="fill-neutral-500 shrink-0" />
      <div class="flex flex-wrap gap-2">
        {
          // TODO: hide filters behind a toggle on small screens
          Object.values(ProjectType)
            .sort()
            .map((projectType) => (
              <div>
                <input
                  type="checkbox"
                  id={`project-type-option-${projectType}`}
                  name={projectType}
                  class="project-type-option peer sr-only"
                />
                <label
                  for={`project-type-option-${projectType}`}
                  class="flex select-none rounded-2xl bg-sky-200 py-1 px-3 text-lg text-sky-800 shadow transition before:block before:w-0 before:opacity-0 before:transition-all before:content-['â€¢'] hover:text-sky-600 active:bg-sky-300 peer-checked:bg-sky-700 peer-checked:text-white peer-checked:shadow-md peer-checked:before:mr-2 peer-checked:before:w-auto peer-checked:before:opacity-100 peer-focus:ring-4"
                >
                  {projectType}
                </label>
              </div>
            ))
        }
      </div>
    </fieldset>
    <ul
      class="mt-12 flex flex-col items-center gap-12 md:mt-16 md:flex-row md:flex-wrap md:items-stretch"
    >
      {
        sortedProjects.map((project) => (
          <Card
            type={ProjectType[project.type]}
            title={project.title}
            body={project.body}
            date={project.date}
            url={project.url}
          >
            <ProjectImage
              image={project.image}
              emoji={project.emoji}
              alt={project.alt}
            />
          </Card>
        ))
      }
    </ul>
  </main>
</BaseLayout>

<script>
  const projectTypeOptions = document.querySelectorAll<HTMLInputElement>(
    "input.project-type-option"
  );

  function filterProjects() {
    // Get the list of project types to be shown
    let selectedProjectTypes = [];
    for (let option of projectTypeOptions) {
      if (option.checked) {
        selectedProjectTypes.push(option.name);
      }
    }

    // Hide or show projects depending on their type
    const projectCards = document.querySelectorAll<HTMLElement>(".card");
    for (let projectCard of projectCards) {
      const projectType = projectCard
        .querySelector(".card-type")
        ?.textContent?.trim();
      if (
        selectedProjectTypes.length === 0 ||
        (projectType && selectedProjectTypes.includes(projectType))
      ) {
        projectCard.style.display = "block";
      } else {
        projectCard.style.display = "none";
      }
    }
  }

  // The pageshow event is fired when the page is opened, but also when loading
  // the page from cache after using the browser's back navigation
  window.addEventListener("pageshow", () => {
    filterProjects();
  });

  for (let option of projectTypeOptions) {
    option.addEventListener("change", () => {
      filterProjects();
    });
  }
</script>
